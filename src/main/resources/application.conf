# Environment variables:
#
#   APP_ADDR - IP Address for our host (here we need to ensure the Weave NIC is used!)
#   ETCD_URL - URL pointing to our compute nodes etcd service
#   ROLES    - comma separated list of strings that describe the roles that this actor system possesses

# Logging knobs - twiddle to set appropriately
logging {
  level = DEBUG

  # Log dead letters
  dead-letters = on

  # Log all LoggingFSMs for events, transitions and timers (using akka.actor.LoggingFSM[StateType, Data])
  fsm = on

  # Logging of message invocations on certain (local) actors (using akka.event.LoggingReceive)
  receive = on

  # Log unhandled actor messages
  unhandled = on

  # Log cluster informational messages
  cluster = on

  # Log all inbound and outbound messages to remote actors
  remote = off
}

akka {
  loglevel = ${logging.level}
  stdout-loglevel = ${logging.level}

  loggers = ["akka.event.slf4j.Slf4jLogger"]

  log-dead-letters = ${logging.dead-letters}

  system = "CoreOSApplication"

  actor {
    debug {
      fsm = ${logging.fsm}

      receive = ${logging.receive}

      unhandled = ${logging.unhandled}

      # number of events FSM Logging buffer stores in DEBUG logging
      logging.depth = 20
    }

    provider = "akka.cluster.ClusterActorRefProvider"
  }

  cluster {
    # Determines what roles this node has
    roles = [ ${?ROLES} ]

    log-info = ${logging.cluster}

    retry = 5 s # Time to wait between retries for etcd supplied seed nodes
  }

  remote {
    enabled-transports = ["akka.remote.netty.tcp"]

    log-sent-messages = ${logging.remote}

    log-received-messages = ${logging.remote}

    netty.tcp {
      hostname = ${?APP_ADDR}
      port = 0
    }
  }
}

application {
  hostname = ${?APP_ADDR}
  port = 80

  timeout = 30 s

  # Used to control if the application is launched with a DEBUG console or not
  debug = true
}

etcd {
  url = ${?ETCD_URL}
}
